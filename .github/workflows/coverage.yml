name: Code Coverage
on: [push, pull_request]
env:
  CARGO_TERM_COLOR: always
  LLVM_PROFILE_FILE: rsql-%p-%m.profraw
  RUST_BACKTRACE: 1
  RUST_LOG: "info"
  RUST_LOG_SPAN_EVENTS: full
  RUSTFLAGS: -Cinstrument-coverage
  RUSTDOCFLAGS: -Cinstrument-coverage
  CARGO_INCREMENTAL: 0

jobs:
  core:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        run: |
          cargo test --package squill-core

      - name: Generate coverage for squill-core
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  blocking:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        run: |
          cargo test --package squill-blocking

      - name: Generate code coverage for squill-blocking
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  async:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        run: |
          cargo test --package squill-async

      - name: Generate code coverage for squill-async
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  sqlite:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        run: |
          cargo test --package squill-sqlite

      - name: Generate code coverage for squill-sqlite
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  duckdb:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        run: |
          cargo test --package squill-duckdb --features bundled

      - name: Generate code coverage for squill-duckdb
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  postgres:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: ci
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        env:
          CI_POSTGRES_URI: postgresql://postgres:password@localhost:5432/ci
        run: |
          cargo test --package squill-postgres

      - name: Generate code coverage
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  mysql:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: ci
          MYSQL_USER: user
          MYSQL_PASSWORD: password
        ports:
          - 3306:3306
        options: >-
          --health-cmd "mysqladmin ping -u root -ppassword"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: "llvm-tools-preview"

      - name: Install grcov
        uses: taiki-e/install-action@main
        with:
          tool: grcov

      - name: Running tests
        env:
          CI_MYSQL_URI: mysql://user:password@localhost:3306/ci
        run: |
          cargo test --package squill-mysql

      - name: Generate code coverage
        run: |
          grcov $(find . -name "rsql-*.profraw" -print) \
            -s . \
            --branch \
            --ignore-not-existing \
            --ignore='target/*' \
            --ignore='benches/*' \
            --ignore='examples/*' \
            --ignore='/*' \
            --binary-path ./target/debug/ \
            --excl-line='#\[derive' \
            -t lcov \
            -o lcov.info

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
